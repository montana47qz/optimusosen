export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method not allowed" });
  }

  try {
    const { phone, prize } = req.body;

    // –°–æ–±–∏—Ä–∞–µ–º –¥–æ–ø. –∏–Ω—Ñ—É
    const ip =
      req.headers["x-forwarded-for"]?.split(",")[0] ||
      req.socket.remoteAddress;
    const ua = req.headers["user-agent"] || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    const ref = req.headers["referer"] || "–ü—Ä—è–º–æ–π –∑–∞—Ö–æ–¥";

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const text = `‚úÖ –ù–æ–≤—ã–π –ª–æ–≥
üìû –ù–æ–º–µ—Ä: ${phone || "‚Äî"}
üéÅ –ü—Ä–∏–∑: ${prize || "‚Äî"}
‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString("ru-RU", { timeZone: "Asia/Almaty" })}
üåç IP: ${ip}
üñ•Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${ua}
üîó –ò—Å—Ç–æ—á–Ω–∏–∫: ${ref}`;

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    await fetch(
      `https://api.telegram.org/bot${process.env.TG_BOT_TOKEN}/sendMessage`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          chat_id: process.env.TG_CHAT_ID,
          text,
        }),
      }
    );

    return res.status(200).json({ ok: true });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ log.js:", err);
    return res.status(500).json({ error: "Internal Server Error" });
  }
}
